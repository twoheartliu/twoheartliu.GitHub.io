<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on twoheart&#39;s blog</title>
    <link>https://twoheart.cn/tags/vue/</link>
    <description>Recent content in Vue on twoheart&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 28 May 2020 16:18:41 +0800</lastBuildDate>
    
	<atom:link href="https://twoheart.cn/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 进阶属性</title>
      <link>https://twoheart.cn/posts/vue-%E8%BF%9B%E9%98%B6%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 28 May 2020 16:18:41 +0800</pubDate>
      
      <guid>https://twoheart.cn/posts/vue-%E8%BF%9B%E9%98%B6%E5%B1%9E%E6%80%A7/</guid>
      <description>Direvtives 指令 自定义指令 我们已经学习了一些内置指令，如：v-html/v-for/v-text 我们也可以自定义指令，如 v-x
directiveOptions directiveOptions 可以包含以下钩子函数：
 bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。 inserted：被绑定元素插入到父节点时调用 update：所在组件的 Vnode 更新时调用 componentUpdated: 指令所在组件的 VNode 及其子 VNode 全部更新后调用 unbind：只调用一次，指令与元素解绑时调用  写法一 全局声明：
Vue.directive(&amp;lsquo;x&amp;rsquo;, directiveOptions);
Vue.directive(&amp;#39;x&amp;#39;, { inserted: function (el) { el.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; { console.log(&amp;#39;clicked&amp;#39;) }) } }) 写法二 局部声明
只在组件内部使用自定义指令
export default { name: &amp;#34;App&amp;#34;, components: { HelloWorld }, directives: { y: { inserted: function(el) { el.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { console.log(&amp;#34;yyy&amp;#34;); }); } } } }; 自制 v-on2 指令 import Vue from &amp;#34;vue/dist/vue.</description>
    </item>
    
    <item>
      <title>Vue 模版/指令与修饰符</title>
      <link>https://twoheart.cn/posts/2020-05-22-vue-%E6%A8%A1%E7%89%88-%E6%8C%87%E4%BB%A4%E4%B8%8E%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 22 May 2020 15:15:54 +0000</pubDate>
      
      <guid>https://twoheart.cn/posts/2020-05-22-vue-%E6%A8%A1%E7%89%88-%E6%8C%87%E4%BB%A4%E4%B8%8E%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>Vue 模版（template）的三种写法 1. 直接写在 HTML 里（完整版） 2. 写在 Vue 的 options 里（完整版） 3. Vue 文件中的 template 标签（非完整版） 注意： 在 template 标签里，是使用的 xml 语法，需要闭合标签。
展示内容 表达式 object.a //变量 a + b //表达式 fn(n) //调用函数 fn(n) //调用函数 如果值为 undefined 或者 null 则不显示 另一写法是
&amp;lt;span v-text=&amp;#34;msg&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;!-- 和下面的一样 --&amp;gt; &amp;lt;span&amp;gt;{{msg}}&amp;lt;/span&amp;gt; 显示富文本 html 内容 &amp;lt;div v-html=&amp;#34;&amp;#39;&amp;lt;h1&amp;gt;this is h1&amp;lt;/h1&amp;gt;&amp;#39;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; v-pre 当需要不对模版进行编译时
&amp;lt;div v-pre&amp;gt;{{n}}&amp;lt;/div&amp;gt; // 页面显示的内容就是： {{ n }} 本身 绑定属性：v-bind img 的 src // x = &amp;#39;xxx.</description>
    </item>
    
    <item>
      <title>Vue 进阶属性之 computed/watch</title>
      <link>https://twoheart.cn/posts/2020-05-21-vue-%E8%BF%9B%E9%98%B6%E5%B1%9E%E6%80%A7%E4%B9%8B-computed-watch/</link>
      <pubDate>Thu, 21 May 2020 10:38:11 +0000</pubDate>
      
      <guid>https://twoheart.cn/posts/2020-05-21-vue-%E8%BF%9B%E9%98%B6%E5%B1%9E%E6%80%A7%E4%B9%8B-computed-watch/</guid>
      <description>首先复习一下响应式原理：
 Vue 对传入的 data 进行监听 传入的 data 会被 Vue 代理 每次对 data 的读写都会通过代理处理 Vue 会在 data 变化时更新 UI  这里要讲 Vue 除了可以更新 UI 还可以做什么
computed 计算属性 用途 示例代码 1
 当模版内需要使用复杂逻辑、表达式来展示时，使用 computed 是比较好的实践 同时当模版内有多处包含复杂逻辑时，可以用 computed 自定义计算属性可以是一个 function，也可以是一个包含 get、set 的对象。  示例代码 2
 使用 methods 属性 filter 筛选性别 使用 v-for 指令渲染数组  有没有更优雅的办法？使用 computed 属性 示例代码 3
 computed 消除相同逻辑代码，避免重复（DRY：Don&amp;rsquo;t repeat yourself） 逻辑清晰，方便增加功能 computed 有缓存，当数据没有发生变化，便不会重新渲染页面  watch 简单举例 watch 即当数据发生变化时，执行一个函数。 示例代码 1 ：用 watch 实现撤消 示例代码 2 ：用 watch 模拟 computed ) 由此可见，watch 更偏向于监听记录，而非进行计算，该根据需要选择适用的属性</description>
    </item>
    
    <item>
      <title>Vue 实例与构造选项</title>
      <link>https://twoheart.cn/posts/2020-05-14-vue-%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E9%80%89%E9%A1%B9/</link>
      <pubDate>Thu, 14 May 2020 10:47:56 +0000</pubDate>
      
      <guid>https://twoheart.cn/posts/2020-05-14-vue-%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E9%80%89%E9%A1%B9/</guid>
      <description>什么是 Vue 实例 每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始
const vm = new Vue(options); vm 对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM 更新 vm 的构造函数是 Vue，按照 ES6 的说法，vm 所属的类是 Vue options 是 new Vue 的参数，一般称之为选项或构造选项
options 在 Vue 的文档中将选项分为了这样几大类，分别是：数据、DOM、生命周期钩子、资源、组合和其他。 options 的五类属性  数据: data/props/propsData/computed/methods/watch DOM: el/tempalte/render/renderError 生命周期钩子： beforeCreate/created/beforeMount/mounted/beforeUpdate/updated/activated/deactivated/beforeDestroy/destroyed/errorCaptured 资源：directives/filters/component 组合：parent/mixins/provide/inject 其他  属性分类 入门属性 el-挂载点 Vue 实例所挂载的 DOM 元素，如果存在 el 则实例立即进行编译，如果不存在则需要使用 vm.$mount 手动开启编译
new Vue({ el: &amp;#39;#app&amp;#39;, render: h =&amp;gt; h1(Demo) }) // 同下 new Vue({ render: h =&amp;gt; h1(Demo) }).</description>
    </item>
    
    <item>
      <title>Vue 的两个版本</title>
      <link>https://twoheart.cn/posts/2020-05-13-vue-%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 13 May 2020 01:15:52 +0000</pubDate>
      
      <guid>https://twoheart.cn/posts/2020-05-13-vue-%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</guid>
      <description>Vue 分为完整版本和 runtime-only 版本。
    Vue 完整版 Vue 非完整版 评价     视图 写在 HTML 里 或者写在 template 里 写在 render 函数里用 h 来创建标签 h 是尤雨溪写好传给 render 的   特点 有 compiler 没有 compiler compiler 占 40% 体积   webpack 引入 需要配置 alias 默认使用此版 尤雨溪配置的   cdn 引入 vue.js vue.runtime.js 文件名不同，生成环境后缀为 .min.js   @vue/cli 引入 需要额外配置 默认使用此版 尤雨溪、蒋豪群配置的    使用场景  Vue 完整版虽然有编译器，可以直接操作 HTML 节点，但是他相对于来说体积比 runtime 版本多 40%，所以完整版适用于部分开发环境 Vue runtime 版抛弃了编译器，使它的体积小了很多，适用于生产版本 @vue/cli 让 runtime 版本也提供了便利的开发体验，利用 vue-loader 让开发者不必使用 h 函数 所以最佳实践是总是使用非完整版，然后配合 vue-loader 和 vue 文件  template 与 render template 即 vue 文件格式下使用 template 创建 html 页面内容。 render 函数就是用 render 函数用类似 dom 树的方式对页面进行创建，即：</description>
    </item>
    
  </channel>
</rss>