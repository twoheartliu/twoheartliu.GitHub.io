<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on twoheart&#39;s blog</title>
    <link>twoheartliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on twoheart&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 07 May 2020 00:42:32 +0000</lastBuildDate>
    
	<atom:link href="twoheartliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析 MVC</title>
      <link>twoheartliu.github.io/posts/2020-05-07-%E6%B5%85%E6%9E%90-mvc/</link>
      <pubDate>Thu, 07 May 2020 00:42:32 +0000</pubDate>
      
      <guid>twoheartliu.github.io/posts/2020-05-07-%E6%B5%85%E6%9E%90-mvc/</guid>
      <description>什么是 MVC MVC 是一种架构设计模式，分别指 Model（模型）、View（视图）和 Controller (控制器)。这种架构思想，使得代码复杂度能够恒定增长，提高代码灵活性和复用性。
其中：
  模型 model 用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法，会有一个或多个视图监听此模型。一旦模型的数据发生变化，模型将通知有关的视图。
eg：
const model = { data: 原数据, create() {}, delete() {}, update(data) { // 将传入的 data 覆盖原有的数据 Object.assign(model.data, data) // 用 eventBus 进行对象间通信， 方便 view 收到更新的状态 eventBus.trigger(&amp;#39;m:update&amp;#39;) } }   视图 view 是它在屏幕上的表示，描绘的是 model 的当前状态。当模型的数据发生变化，视图相应地得到刷新自己的机会。 eg：
const view = { el: 默认元素, html: 将要写入到页面的 DOM, init(element) { // 初始化绑定的元素 view.el = $(element) }, render(n) { 将 DOM 清空，并把新数据渲染到 DOM } }   控制器 controller 定义用户界面对用户输入的响应方式，起到不同层面间的组织作用，用于控制应用程序的流程，它处理用户的行为和数据 model 上的改变。 eg：</description>
    </item>
    
  </channel>
</rss>