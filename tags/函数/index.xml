<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数 on twoheart&#39;s blog</title>
    <link>https://twoheartliu.github.io/tags/%E5%87%BD%E6%95%B0/</link>
    <description>Recent content in 函数 on twoheart&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 29 Oct 2019 23:39:08 +0000</lastBuildDate>
    
	<atom:link href="https://twoheartliu.github.io/tags/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://twoheartliu.github.io/posts/2019-10-29-js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Tue, 29 Oct 2019 23:39:08 +0000</pubDate>
      
      <guid>https://twoheartliu.github.io/posts/2019-10-29-js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>解题 let i = 0; for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 打印出的结果会是 6 个 6。 因为 i 是在全局下定义的，i 的值在循环后最终会是 6，而 setTimeout 函数会在循环后运行，运行 6 次，所以结果会是 6 个 6.
如何符合预期 for(let i = 0; i &amp;lt; 6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 此时将打印出 0 1 2 3 4 5。因为 for let 循环中，let 在每次循环会生成不同的 i，每次打印的是 i 的不同值。
其他方法 for(var i = 0; i &amp;lt; 6; i++) { !function() { var j = i setTimeout(() =&amp;gt; { console.</description>
    </item>
    
  </channel>
</rss>